// Will contain all the filteration things as object
let queryObj = { ...req.query };

/* 1A) Filtering */

/*
	Exclude these fields from querying object
	page 	= page no of records
	limit 	= per page limit of records
	sort	= sorting order of records
	fields  = Fields we want to exclude or include
*/
const excludedFields = ['page', 'sort', 'limit', 'fields'];

// Delete the excluded fields from quering object
excludedFields.forEach(el => delete queryObj[el]);



/* 1B) Advanced Filtering */

let queryString = JSON.stringify(queryObj);
queryString = queryStr.replace(/\b(gte|gt|lte|lt)\b/g, match => `$${match}`);
queryObj = JSON.parse(queryString)	

let query = Tours.find(queryObj);

/* 2) Sorting */

	if (req.query.sort) {
		const sortBy = req.query.sort.split(',').join(' ');
		query = query.sort(req.query.sort);


		// sort also be called as  .sort('firstField -secondField')
	} else {
		// default sorting result
		query = query.sort('-createdAt')
	}

/* 3) Limiting the fields ( projection ) */
	if (req.query.fields) {
		const fields = req.query.fields.split(',').join(' ');
		query = query.select(fields)
	} else {
		query = query.select('-__v');
	}

/* Pagination */
	const page = req.query.page * 1 || 1;
	const limit = req.query.limit * 1 || 10;
	const skip = (page - 1) * limit;

	query = query.skip(skip).limit(limit);

	if (req.query.page) {
		const numOfRecords = await Model.countDocuments()
		if (skip > numOfRecords) throw new Error('This page doesn't exists');
	}

const tours = await query;

res
	.status(200)
	.json(tours);



// API ALiasing --> calling the same api as above but instead of use pass query string we prefill query string in middleware and calls next to above api
